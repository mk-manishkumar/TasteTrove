openapi: 3.0.0
info:
  title: TasteTrove API
  version: 1.0.0
  description: API documentation for the TasteTrove Food Ordering & Restaurant Management backend.
servers:
  - url: http://localhost:5001/api/v1
    description: Local development server
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
        userName:
          type: string
        email:
          type: string
        phone:
          type: string
        address:
          type: array
        usertype:
          type: string
          enum: [clinet, admin, vendor, driver]
        profile:
          type: string
        answer:
          type: string
    Restaurant:
      type: object
      properties:
        title:
          type: string
        coords:
          type: object
          properties:
            latitude: { type: number }
            longitude: { type: number }
        rating:
          type: number
    Food:
      type: object
      properties:
        title: { type: string }
        description: { type: string }
        price: { type: number }
        resturnat: { type: string }
        isAvailabe: { type: boolean }
    Category:
      type: object
      properties:
        title: { type: string }
        imageUrl: { type: string }
    Order:
      type: object
      properties:
        foods:
          type: array
          items:
            $ref: "#/components/schemas/Food"
        buyer:
          type: string
        status:
          type: string
          enum: [preparing, prepare, on the way, delivered]

security:
  - bearerAuth: []

paths:
  /auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [userName, email, password, phone, address, answer]
              properties:
                userName: { type: string }
                email: { type: string }
                password: { type: string }
                phone: { type: string }
                address: { type: array }
                answer: { type: string }
      responses:
        "201":
          description: User registered successfully

  /auth/login:
    post:
      summary: Login user and get JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string }
                password: { type: string }
      responses:
        "200":
          description: Login successful, returns token

  /user/getUser:
    get:
      summary: Get logged-in user profile
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User profile data

  /user/updateUser:
    put:
      summary: Update user profile
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userName: { type: string }
                address: { type: array }
                phone: { type: string }
      responses:
        "200":
          description: User updated successfully

  /user/updatePassword:
    post:
      summary: Change user password
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [oldPassword, newPassword]
              properties:
                oldPassword: { type: string }
                newPassword: { type: string }
      responses:
        "200":
          description: Password updated successfully

  /user/resetPassword:
    post:
      summary: Reset password with security answer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [email, newPassword, answer]
              properties:
                email: { type: string }
                newPassword: { type: string }
                answer: { type: string }
      responses:
        "200":
          description: Password reset successfully

  /user/deleteUser/{id}:
    delete:
      summary: Delete user account
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Account deleted

  /restaurant/create:
    post:
      summary: Create a restaurant
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Restaurant"
      responses:
        "201":
          description: Restaurant created

  /restaurant/getAll:
    get:
      summary: Get all restaurants
      responses:
        "200":
          description: List of restaurants

  /restaurant/get/{id}:
    get:
      summary: Get restaurant by ID
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Restaurant details

  /restaurant/delete/{id}:
    delete:
      summary: Delete restaurant
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Restaurant deleted

  /food/create:
    post:
      summary: Create food item
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Food"
      responses:
        "201":
          description: Food item created

  /food/getAll:
    get:
      summary: Get all food items
      responses:
        "200":
          description: List of foods

  /food/get/{id}:
    get:
      summary: Get single food item by ID
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Food details

  /food/getByRestaurant/{id}:
    get:
      summary: Get foods by restaurant ID
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          description: List of foods for the restaurant

  /food/update/{id}:
    put:
      summary: Update food item
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Food"
      responses:
        "200":
          description: Food updated

  /food/delete/{id}:
    delete:
      summary: Delete food item
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Food deleted

  /food/placeorder:
    post:
      summary: Place an order
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                cart:
                  type: array
                  items: { $ref: "#/components/schemas/Food" }
      responses:
        "201":
          description: Order placed

  /food/orderStatus/{id}:
    post:
      summary: Update order status (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status: { type: string }
      responses:
        "200":
          description: Order status updated

  /category/create:
    post:
      summary: Create category
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
      responses:
        "201":
          description: Category created

  /category/getAll:
    get:
      summary: Get all categories
      responses:
        "200":
          description: List of categories

  /category/update/{id}:
    put:
      summary: Update category
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
      responses:
        "200":
          description: Category updated

  /category/delete/{id}:
    delete:
      summary: Delete category
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Category deleted
